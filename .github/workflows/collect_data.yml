name: Monthly Flight Data Collection

on:
  schedule:
    # Run on the 1st and 15th of each month
    - cron: '0 0 1,15 * *'
  workflow_dispatch:  # Allow manual triggers
    inputs:
      month:
        description: 'Month to collect (1-12)'
        required: false
        type: number
      airport:
        description: 'Airport code (e.g., KLAS)'
        required: false
        type: string

jobs:
  collect:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for progress tracking
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create .env file
        run: |
          echo "OPENSKY_USERNAME=${{ secrets.OPENSKY_USERNAME }}" >> .env
          echo "OPENSKY_PASSWORD=${{ secrets.OPENSKY_PASSWORD }}" >> .env
          echo "OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }}" >> .env
          echo "REQUEST_COOLDOWN=2" >> .env
          echo "MAX_RETRIES=3" >> .env
          echo "ENVIRONMENT=production" >> .env
          echo "DEBUG=False" >> .env
          
      - name: Determine collection parameters
        id: params
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.month }}" ]; then
            echo "month=${{ github.event.inputs.month }}" >> $GITHUB_OUTPUT
          else
            echo "month=$(date +%-m)" >> $GITHUB_OUTPUT
          fi
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.airport }}" ]; then
            echo "airport=${{ github.event.inputs.airport }}" >> $GITHUB_OUTPUT
            echo "single_airport=true" >> $GITHUB_OUTPUT
          else
            echo "single_airport=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Run data collection
        env:
          OPENSKY_USERNAME: ${{ secrets.OPENSKY_USERNAME }}
          OPENSKY_PASSWORD: ${{ secrets.OPENSKY_PASSWORD }}
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          COLLECTION_MONTH: ${{ steps.params.outputs.month }}
          SINGLE_AIRPORT: ${{ steps.params.outputs.single_airport }}
          TARGET_AIRPORT: ${{ steps.params.outputs.airport }}
          ENVIRONMENT: production
          DEBUG: false
        run: |
          # Create data directory if it doesn't exist
          mkdir -p data/historical
          
          # Run the collector with the determined parameters
          if [ "$SINGLE_AIRPORT" = "true" ]; then
            echo "Collecting data for airport: $TARGET_AIRPORT"
            python -c "
          from src.data_collection.collector_daemon import HistoricalDataCollector;
          collector = HistoricalDataCollector();
          collector.collect_2024_data('$TARGET_AIRPORT', month=int('$COLLECTION_MONTH'))
          "
          else
            echo "Collecting data for all hubs for month: $COLLECTION_MONTH"
            python -c "
          from src.data_collection.collector_daemon import HistoricalDataCollector;
          from src.config.settings import SWA_HUBS;
          collector = HistoricalDataCollector();
          for airport in SWA_HUBS:
              collector.collect_2024_data(airport, month=int('$COLLECTION_MONTH'))
          "
          fi
          
      - name: Check for changes
        id: changes
        run: |
          git diff --quiet data/historical/ || echo "has_changes=true" >> $GITHUB_OUTPUT
          
      - name: Commit and push if changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Stage only JSON files in the historical directory
          git add "data/historical/*.json"
          
          # Create commit message based on collection type
          if [ "${{ steps.params.outputs.single_airport }}" = "true" ]; then
            message="Update flight data for ${{ steps.params.outputs.airport }} (Month: ${{ steps.params.outputs.month }})"
          else
            message="Update flight data for all hubs (Month: ${{ steps.params.outputs.month }})"
          fi
          
          git commit -m "$message [skip ci]"
          git push 