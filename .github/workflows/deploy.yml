name: Deploy to GitHub Pages

on:
  push:
    branches: 
      - "main"
      - "troubleshoot-static-api"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Generate static API responses
        run: |
          mkdir -p _site/api
          python -c '
          import json
          import os
          import pandas as pd
          import numpy as np
          from datetime import datetime
          import logging
          from src.models.predictor import BeveragePredictor

          # Setup logging
          logging.basicConfig(level=logging.INFO)

          # Business and vacation route pairs
          BUSINESS_ROUTES = {
              ("KLAS", "KLAX"), ("KLAX", "KLAS"),
              ("KSFO", "KLAX"), ("KLAX", "KSFO"),
              ("KDFW", "KHOU"), ("KHOU", "KDFW")
          }
          
          VACATION_ROUTES = {
              ("KMCO", "KLAS"), ("KLAS", "KMCO"),
              ("KLAS", "KMIA"), ("KMIA", "KLAS"),
              ("KLAS", "KHNL"), ("KHNL", "KLAS")
          }

          def calculate_flight_duration(origin, destination):
              """Estimate flight duration based on airport pairs."""
              # Could enhance with actual distance calculations
              if (origin, destination) in {
                  ("KLAS", "KLAX"), ("KLAX", "KLAS"),
                  ("KSFO", "KLAX"), ("KLAX", "KSFO")
              }:
                  return 1.5  # Short haul
              elif (origin, destination) in {
                  ("KLAS", "KORD"), ("KORD", "KLAS"),
                  ("KLAS", "KJFK"), ("KJFK", "KLAS")
              }:
                  return 4.5  # Long haul
              else:
                  return 2.5  # Medium haul

          # Initialize predictor with saved model
          predictor = BeveragePredictor()
          predictor = predictor.load_model("models/beverage_predictor.joblib")

          # Get all historical data files
          data_dir = "data/historical"
          all_dates = set()
          flights_by_date = {}
          predictions = {}

          for file in os.listdir(data_dir):
              if file.endswith("_flights.json"):  # Only process flight data files
                  with open(os.path.join(data_dir, file)) as f:
                      flights = json.load(f)
                      for flight in flights:  # flights is a list of flight objects
                          # Extract flight details
                          flight_number = flight["callsign"].replace("SWA", "")  # Remove SWA prefix
                          timestamp = flight["firstSeen"]
                          date = datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d")
                          origin = flight["estDepartureAirport"]
                          destination = flight["estArrivalAirport"]
                          
                          # Calculate flight duration
                          duration_hours = calculate_flight_duration(origin, destination)
                          
                          # Determine route type
                          is_business = (origin, destination) in BUSINESS_ROUTES
                          is_vacation = (origin, destination) in VACATION_ROUTES
                          
                          # Create a standardized flight object for API
                          flight_obj = {
                              "flight_number": flight_number,
                              "departure_time": datetime.fromtimestamp(timestamp).isoformat(),
                              "origin": origin,
                              "destination": destination,
                              "passenger_count": 150  # Default for now
                          }
                          
                          # Create DataFrame for prediction
                          flight_data = pd.DataFrame([{
                              "timestamp": timestamp,
                              "duration_hours": duration_hours,
                              "passenger_count": 150,  # Default for now
                              "is_holiday": False,  # Could enhance with holiday detection
                              "is_business_route": is_business,
                              "is_vacation_route": is_vacation
                          }])
                          
                          all_dates.add(date)
                          if date not in flights_by_date:
                              flights_by_date[date] = []
                          flights_by_date[date].append(flight_obj)
                          
                          try:
                              # Generate predictions for each flight
                              pred = predictor.predict(flight_data)
                              total_beverages = int(np.clip(pred[0], 50, 500))  # Reasonable range
                              beverages_per_passenger = round(total_beverages / 150, 2)
                              
                              # Determine status based on beverages per passenger
                              if beverages_per_passenger < 1:
                                  status = "low"
                                  trend = "decreasing"
                                  trend_color = "danger"
                              elif beverages_per_passenger > 3:
                                  status = "high"
                                  trend = "increasing"
                                  trend_color = "warning"
                              else:
                                  status = "optimal"
                                  trend = "stable"
                                  trend_color = "success"
                              
                              predictions[flight_number] = {
                                  "flight_number": flight_number,
                                  "departure_time": flight_obj["departure_time"],
                                  "origin": origin,
                                  "destination": destination,
                                  "passenger_count": flight_obj["passenger_count"],
                                  "total_beverages": total_beverages,
                                  "beverages_per_passenger": beverages_per_passenger,
                                  "flight_duration": duration_hours,
                                  "confidence": 0.85,
                                  "status": status,
                                  "trend": trend,
                                  "trend_color": trend_color
                              }
                          except Exception as e:
                              logging.error(f"Error predicting for flight {flight_number}: {str(e)}")
                              continue

          # Write dates endpoint
          with open("_site/api/dates.json", "w") as f:
              json.dump({"dates": sorted(list(all_dates))}, f)

          # Write flights endpoints
          os.makedirs("_site/api/flights", exist_ok=True)
          for date, flights in flights_by_date.items():
              with open(f"_site/api/flights/{date}.json", "w") as f:
                  json.dump({"flights": flights}, f)

          # Write predictions endpoints
          os.makedirs("_site/api/predictions", exist_ok=True)
          for flight_id, prediction in predictions.items():
              with open(f"_site/api/predictions/{flight_id}.json", "w") as f:
                  json.dump(prediction, f)
          '
          
      - name: Copy static files
        run: |
          cp -r *.html _site/
          cp -r css _site/ || true
          cp -r js _site/ || true
          cp -r images _site/ || true
          cp -r docs _site/ || true
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 